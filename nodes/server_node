#!/usr/bin/env python3
from http import server
from armer_teleop.msg import FloatArr
import rospy
import socket

localIP             = "192.168.125.100"
localPort           = 4950
bufferSize          = 1024
msgFromServer       = "Hello UDP Client"
bytesToSend         = str.encode(msgFromServer)

# Create a datagram socket
UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
# Bind to address and ip
UDPServerSocket.bind((localIP, localPort))


class ServerNode():
    def __init__(self) -> None:
        # ------- Setup servers/services/publishers etc. ------------
        self.arr_pub = rospy.Publisher(
            '/server/array',
            FloatArr,
            queue_size=1
        )
        

    def run(self) -> None:
        """
        Class Run Method
        
        - TODO: add functionality
        """
        ros_node_rate = rospy.Rate(100) #hz
        while not rospy.is_shutdown():
            # Do stuff
            bytesAddressPair = UDPServerSocket.recvfrom(bufferSize)

            message = bytesAddressPair[0]
            address = bytesAddressPair[1]

            clientMsg = "Message from Client:{}".format(message)
            clientIP  = "Client IP Address:{}".format(address)
            
            print(message)
            # print(clientIP)

            strmsg = str(message)
            arrmsg = FloatArr()
            strmsg = strmsg.replace("'", "")
            arr = strmsg.split(',')
            step = 0
            arr_tofill = []
            for val in arr:
                if step == 0:
                    step += 1
                    continue
                else:
                   arr_tofill.append(float(val))


            # print(f"split recv arr: {arr} | arr element 1 as float: {float(arr)}")

            #### TEST ARRAY OUT
            arrmsg = FloatArr()
            arrmsg.arr = arr_tofill
            self.arr_pub.publish(arrmsg)

            # Sending a reply to client
            # UDPServerSocket.sendto(bytesToSend, address)

            # Tick the node
            ros_node_rate.sleep()


if __name__ == '__main__':
    # Create ROS node 
    rospy.init_node('Armer_Teleop_Server_Node')

    try:
        server = ServerNode()
        rospy.loginfo(f"Server Node Alive!")
        server.run()
    except AttributeError:
        rospy.logerr("Class could not be defined -> Exiting gracefully")